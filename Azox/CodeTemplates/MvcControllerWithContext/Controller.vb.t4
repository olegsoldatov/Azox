<#@ template language="VB" HostSpecific="True" #>
<#@ output extension="vb" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet(Of System.String)" name="RequiredNamespaces" #>
<#
	Dim routePrefix As String
	If String.IsNullOrEmpty(AreaName) Then
		routePrefix = ControllerRootName
	Else
		routePrefix = AreaName + "/" + ControllerRootName
	End If
#>
Imports System.Data.Entity
<# If (UseAsync) Then #>
Imports System.Threading.Tasks
<# End If #>
Imports System.Net
<# For Each namespaceName As String In RequiredNamespaces  #>
Imports <#= namespaceName #>
<# Next #>
<#
	Dim entitySetName = ModelMetadata.EntitySetName
	Dim entitySetVar = "entities"
	Dim primaryKeyName = ModelMetadata.PrimaryKeys(0).PropertyName
	Dim primaryKeyShortTypeName = ModelMetadata.PrimaryKeys(0).ShortTypeName
	Dim primaryKeyDefaultValue = ModelMetadata.PrimaryKeys(0).DefaultValue
	Dim primaryKeyType = ModelMetadata.PrimaryKeys(0).TypeName
	Dim primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName)
	Dim primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys(0).IsAutoGenerated
	Dim lambdaVar = ModelVariable(0)
	Dim relatedProperties As IDictionary(Of String, RelatedModelMetadata) = ModelMetadata.RelatedEntities.ToDictionary(Function(item) item.AssociationPropertyName)
#>

Namespace <#= Namespace #>
	Public Class <#= ControllerName #>
		Inherits Controller

		Private Db As New <#= ContextTypeName #>

<# If (UseAsync) Then #>
		Async Function Index(searchText As String, Optional pageIndex As Integer = 0, Optional pageSize As Integer = 20) As Task(Of ActionResult)
<# Else #>
		Function Index(searchText As String, Optional pageIndex As Integer = 0, Optional pageSize As Integer = 20) As ActionResult
<# End If #>
<#	Dim includeExpressions As String = ""
	includeExpressions = String.Join("", relatedProperties.Values.Select(Function(propertyModel) String.Format(".Include(Function({0}) {0}.{1})", lambdaVar, propertyModel.AssociationPropertyName)))
#>
<# If (Not String.IsNullOrEmpty(includeExpressions)) Then #>
			Dim <#= entitySetVar #> = Db.<#= entitySetName #><#= includeExpressions #>.AsNoTracking
<# Else #>
			Dim <#= entitySetVar #> = Db.<#= entitySetName #>.AsNoTracking
<# End If #>

			'Поиск.
			If Not String.IsNullOrEmpty(searchText) Then
				<#= entitySetVar #> = <#= entitySetVar #>.Where(Function(x) x.Title.Contains(searchText))
			End If

			'Пагинация.
			ViewBag.PageIndex = pageIndex
<# If (UseAsync) Then #>
			ViewBag.PageCount = CInt(Math.Ceiling(Await <#= entitySetVar #>.CountAsync / pageSize))

			Return View(Await <#= entitySetVar #>.OrderBy(Function(x) x.Title).Skip(pageIndex * pageSize).Take(pageSize).ToListAsync)
<# Else #>
			ViewBag.PageCount = CInt(Math.Ceiling(<#= entitySetVar #>.Count / pageSize))

			Return View(<#= entitySetVar #>.OrderBy(Function(x) x.Title).Skip(pageIndex * pageSize).Take(pageSize).ToList)
<# End If #>
		End Function

<# If (UseAsync) Then #>
		Async Function Details(id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
		Function Details(id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
			If IsNothing(id) Then
				Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
			End If
<# If (UseAsync) Then #>
			Dim model = Await Db.<#= entitySetName #>.FindAsync(id)
<# Else #>
			Dim model = Db.<#= entitySetName #>.Find(id)
<# End If #>
			If IsNothing(model) Then
				Return HttpNotFound()
			End If
			Return View(model)
		End Function

		Function Create() As ActionResult
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
			ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(Db.<#= propertyModel.EntitySetName #>.AsNoTracking, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>")
<# Next #>
			Return View()
		End Function

		<HttpPost>
		<ValidateAntiForgeryToken>
<# If (UseAsync) Then #>
		Async Function Create(model As <#= ModelTypeName #>) As Task(Of ActionResult)
<# Else #>
		Function Create(model As <#= ModelTypeName #>) As ActionResult
<# End If #>
			If ModelState.IsValid Then
				Db.<#= entitySetName #>.Add(model)
<# If (UseAsync) Then #>
				Await Db.SaveChangesAsync()
<# Else #>
				Db.SaveChanges()
<# End If #>
				TempData("Message") = "Добавлено."
				Return RedirectToAction("index")
			End If
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
			ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(Db.<#= propertyModel.EntitySetName #>.AsNoTracking, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>", model.<#= propertyModel.ForeignKeyPropertyNames(0) #>)
<# Next #>
			Return View(model)
		End Function

<# If (UseAsync) Then #>
		Async Function Edit(id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
		Function Edit(id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
			If IsNothing(id) Then
				Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
			End If
<# If (UseAsync) Then #>
			Dim model = Await Db.<#= entitySetName #>.FindAsync(id)
<# Else #>
			Dim model = Db.<#= entitySetName #>.Find(id)
<# End If #>
			If IsNothing(model) Then
				Return HttpNotFound()
			End If
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
			ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(Db.<#= propertyModel.EntitySetName #>.AsNoTracking, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>", model.<#= propertyModel.ForeignKeyPropertyNames(0) #>)
<# Next #>
			Return View(model)
		End Function

		<HttpPost>
		<ValidateAntiForgeryToken>
<# If (UseAsync) Then #>
		Async Function Edit(model As <#= ModelTypeName #>) As Task(Of ActionResult)
<# Else #>
		Function Edit(model As <#= ModelTypeName #>) As ActionResult
<# End If #>
			If ModelState.IsValid Then
				Db.Entry(model).State = EntityState.Modified
<# If (UseAsync) Then #>
				Await Db.SaveChangesAsync()
<# Else #>
				Db.SaveChanges()
<# End If #>
				TempData("Message") = "Изменено."
				Return RedirectToAction("index")
			End If
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
			ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(Db.<#= propertyModel.EntitySetName #>.AsNoTracking, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>", model.<#= propertyModel.ForeignKeyPropertyNames(0) #>)
<# Next #>
			Return View(model)
		End Function

<# If (UseAsync) Then #>
		Async Function Delete(id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
		Function Delete(id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
			If IsNothing(id) Then
				Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
			End If
<# If (UseAsync) Then #>
			Dim model = Await Db.<#= entitySetName #>.FindAsync(id)
<# Else #>
			Dim model = Db.<#= entitySetName #>.Find(id)
<# End If #>
			If IsNothing(model) Then
				Return HttpNotFound()
			End If
			Return View(model)
		End Function

		<HttpPost>
		<ActionName("Delete")>
		<ValidateAntiForgeryToken>
<# If (UseAsync) Then #>
		Async Function DeleteConfirmed(id As <#= primaryKeyShortTypeName #>) As Task(Of ActionResult)
<# Else #>
		Function DeleteConfirmed(id As <#= primaryKeyShortTypeName #>) As ActionResult
<# End If #>
<# If (UseAsync) Then #>
			Dim entity = Await Db.<#= entitySetName #>.FindAsync(id)
<# Else #>
			Dim entity = Db.<#= entitySetName #>.Find(id)
<# End If #>
			Db.<#= entitySetName #>.Remove(entity)
<# If (UseAsync) Then #>
			Await Db.SaveChangesAsync()
<# Else #>
			Db.SaveChanges()
<# End If #>
			TempData("Message") = "Удалено."
			Return RedirectToAction("index")
		End Function

		Protected Overrides Sub Dispose(ByVal disposing As Boolean)
			If (disposing) Then
				Db.Dispose()
			End If
			MyBase.Dispose(disposing)
		End Sub
	End Class
End Namespace
<#+
' This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
' sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
	Function GetNullableTypeName(ByVal typeNameString As String, ByVal shortTypeName As String) As String
		' The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
		' In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
		Dim primaryKeyType As Type = Nothing
		Try
			primaryKeyType = Type.GetType(typeNameString)
		Catch
		End Try
		If (primaryKeyType IsNot Nothing) AndAlso (primaryKeyType.IsPrimitive OrElse IsGuid(typeNameString)) Then
			Return shortTypeName + "?"
		End If
		Return shortTypeName
	End Function

	Function IsGuid(ByVal typeNameString As String) As Boolean
		Return String.Equals("System.Guid", typeNameString, StringComparison.OrdinalIgnoreCase)
	End Function
#>